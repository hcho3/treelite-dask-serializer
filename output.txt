Built a tree stump
Serialized model to Python buffer frames:
  * Frame 0: dtype int32, length 1
    array([2], dtype=int32)
  * Frame 1: dtype int32, length 1
    array([1], dtype=int32)
  * Frame 2: dtype uint8, length 1
    array([0], dtype=uint8)
  * Frame 3: dtype ModelParam, length 1
    (pred_transform, sigmoid_alpha, global_bias)
    array([
        (b'identity', 1., 0.)
    ])
  * Frame 4: dtype int32, length 1
    array([3], dtype=int32)
  * Frame 5: dtype Node, length 3
    (cleft_, cright_, sindex_, info_, data_count_, sum_hess_, gain_, split_type_, cmp_, missing_category_to_zero_, data_count_present_, 
     sum_hess_present_, gain_present_, pad_)
    array([
        (1, 2, 2147483648, 0., 0, 0., 0., 1, 2, False, False, False, False, 0)
        (-1, -1, 0, -1., 0, 0., 0., 0, 0, False, False, False, False, 0)
        (-1, -1, 0, 1., 0, 0., 0., 0, 0, False, False, False, False, 0)
    ])
  * Frame 6: dtype float32, length 0
    array([], dtype=float32)
  * Frame 7: dtype uint64, length 4
    array([0, 0, 0, 0], dtype=uint64)
  * Frame 8: dtype uint32, length 0
    array([], dtype=uint32)
  * Frame 9: dtype uint64, length 4
    array([0, 0, 0, 0], dtype=uint64)

Deserialized model from Python buffer frames
Round-trip serialization (via Python buffer) preserved all bytes

Built a tree stump with leaf vector
Serialized model to Python buffer frames:
  * Frame 0: dtype int32, length 1
    array([2], dtype=int32)
  * Frame 1: dtype int32, length 1
    array([2], dtype=int32)
  * Frame 2: dtype uint8, length 1
    array([1], dtype=uint8)
  * Frame 3: dtype ModelParam, length 1
    (pred_transform, sigmoid_alpha, global_bias)
    array([
        (b'identity', 1., 0.)
    ])
  * Frame 4: dtype int32, length 1
    array([3], dtype=int32)
  * Frame 5: dtype Node, length 3
    (cleft_, cright_, sindex_, info_, data_count_, sum_hess_, gain_, split_type_, cmp_, missing_category_to_zero_, data_count_present_, 
     sum_hess_present_, gain_present_, pad_)
    array([
        (1, 2, 2147483648, 0., 0, 0., 0., 1, 2, False, False, False, False, 0)
        (-1, -1, 0, 0., 0, 0., 0., 0, 0, False, False, False, False, 0)
        (-1, -1, 0, 0., 0, 0., 0., 0, 0, False, False, False, False, 0)
    ])
  * Frame 6: dtype float32, length 4
    array([-1.,  1.,  1., -1.], dtype=float32)
  * Frame 7: dtype uint64, length 4
    array([0, 0, 2, 4], dtype=uint64)
  * Frame 8: dtype uint32, length 0
    array([], dtype=uint32)
  * Frame 9: dtype uint64, length 4
    array([0, 0, 0, 0], dtype=uint64)

Deserialized model from Python buffer frames
Round-trip serialization (via Python buffer) preserved all bytes

Built a tree stump with a categorical split
Serialized model to Python buffer frames:
  * Frame 0: dtype int32, length 1
    array([2], dtype=int32)
  * Frame 1: dtype int32, length 1
    array([1], dtype=int32)
  * Frame 2: dtype uint8, length 1
    array([0], dtype=uint8)
  * Frame 3: dtype ModelParam, length 1
    (pred_transform, sigmoid_alpha, global_bias)
    array([
        (b'identity', 1., 0.)
    ])
  * Frame 4: dtype int32, length 1
    array([3], dtype=int32)
  * Frame 5: dtype Node, length 3
    (cleft_, cright_, sindex_, info_, data_count_, sum_hess_, gain_, split_type_, cmp_, missing_category_to_zero_, data_count_present_, 
     sum_hess_present_, gain_present_, pad_)
    array([
        (1, 2, 2147483648, 0., 0, 0., 0., 2, 0, False, False, False, False, 0)
        (-1, -1, 0, -1., 0, 0., 0., 0, 0, False, False, False, False, 0)
        (-1, -1, 0, 1., 0, 0., 0., 0, 0, False, False, False, False, 0)
    ])
  * Frame 6: dtype float32, length 0
    array([], dtype=float32)
  * Frame 7: dtype uint64, length 4
    array([0, 0, 0, 0], dtype=uint64)
  * Frame 8: dtype uint32, length 2
    array([0, 1], dtype=uint32)
  * Frame 9: dtype uint64, length 4
    array([0, 2, 2, 2], dtype=uint64)

Deserialized model from Python buffer frames
Round-trip serialization (via Python buffer) preserved all bytes

Built 2 trees with depth 2, mix of categorical and numerical splits
Serialized model to Python buffer frames:
  * Frame 0: dtype int32, length 1
    array([2], dtype=int32)
  * Frame 1: dtype int32, length 1
    array([1], dtype=int32)
  * Frame 2: dtype uint8, length 1
    array([0], dtype=uint8)
  * Frame 3: dtype ModelParam, length 1
    (pred_transform, sigmoid_alpha, global_bias)
    array([
        (b'sigmoid', 1., 0.5)
    ])
  * Frame 4: dtype int32, length 1
    array([7], dtype=int32)
  * Frame 5: dtype Node, length 7
    (cleft_, cright_, sindex_, info_, data_count_, sum_hess_, gain_, split_type_, cmp_, missing_category_to_zero_, data_count_present_, 
     sum_hess_present_, gain_present_, pad_)
    array([
        (1, 2, 2147483648, 0., 0, 0., 0., 1, 2, False, False, False, False, 0)
        (3, 4, 2147483648, 0., 0, 0., 0., 2, 0, False, False, False, False, 0)
        (5, 6, 2147483649, 0., 0, 0., 0., 2, 0, False, False, False, False, 0)
        (-1, -1, 0, -2., 0, 0., 0., 0, 0, False, False, False, False, 0)
        (-1, -1, 0, 1., 0, 0., 0., 0, 0, False, False, False, False, 0)
        (-1, -1, 0, -1., 0, 0., 0., 0, 0, False, False, False, False, 0)
        (-1, -1, 0, 2., 0, 0., 0., 0, 0, False, False, False, False, 0)
    ])
  * Frame 6: dtype float32, length 0
    array([], dtype=float32)
  * Frame 7: dtype uint64, length 8
    array([0, 0, 0, 0, 0, 0, 0, 0], dtype=uint64)
  * Frame 8: dtype uint32, length 3
    array([0, 1, 0], dtype=uint32)
  * Frame 9: dtype uint64, length 8
    array([0, 0, 2, 3, 3, 3, 3, 3], dtype=uint64)
  * Frame 10: dtype int32, length 1
    array([7], dtype=int32)
  * Frame 11: dtype Node, length 7
    (cleft_, cright_, sindex_, info_, data_count_, sum_hess_, gain_, split_type_, cmp_, missing_category_to_zero_, data_count_present_, 
     sum_hess_present_, gain_present_, pad_)
    array([
        (1, 2, 2147483648, 0., 0, 0., 0., 1, 2, False, False, False, False, 0)
        (3, 4, 2147483648, 0., 0, 0., 0., 2, 0, False, False, False, False, 0)
        (5, 6, 2147483649, 0., 0, 0., 0., 2, 0, False, False, False, False, 0)
        (-1, -1, 0, -2., 0, 0., 0., 0, 0, False, False, False, False, 0)
        (-1, -1, 0, 1., 0, 0., 0., 0, 0, False, False, False, False, 0)
        (-1, -1, 0, -1., 0, 0., 0., 0, 0, False, False, False, False, 0)
        (-1, -1, 0, 2., 0, 0., 0., 0, 0, False, False, False, False, 0)
    ])
  * Frame 12: dtype float32, length 0
    array([], dtype=float32)
  * Frame 13: dtype uint64, length 8
    array([0, 0, 0, 0, 0, 0, 0, 0], dtype=uint64)
  * Frame 14: dtype uint32, length 3
    array([0, 1, 0], dtype=uint32)
  * Frame 15: dtype uint64, length 8
    array([0, 0, 2, 3, 3, 3, 3, 3], dtype=uint64)

Deserialized model from Python buffer frames
Round-trip serialization (via Python buffer) preserved all bytes

